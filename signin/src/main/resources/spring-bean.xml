<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 注解扫描 扫描指定包及其子包下的注解 -->
	<context:component-scan base-package="com.ssm">
		<!-- 排除扫描的注解 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 数据源的配置 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/signin"></property>
		<property name="user" value="root"></property>
		<property name="password" value="1029"></property>
		<property name="initialPoolSize" value="5"></property>
		<property name="maxPoolSize" value="10"></property>
		<property name="maxIdleTime" value="1000"></property>
	</bean>

	<!-- 创建mybatis的会话工厂对象 -->
	<bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 设置数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 加载mybatis主配置文件 -->
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!-- 加载映射文件 -->
		<property name="mapperLocations"
			value="classpath:com/ssm/mapping/*.xml" />
	</bean>

	<!-- 扫描映射代理的接口类,注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName"
			value="sessionFactory"></property>
		<property name="basePackage" value="com.ssm.dao"></property>
	</bean>

	<!-- 1配置事务管理类 -->
	<bean id="txManage"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">

		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 2配置事务的特性 -->
	<tx:advice id="txAdvice" transaction-manager="txManage">
		<tx:attributes>
			<!-- 针对使用事务的add开头的方法 read-only 是否只读，true 是，false 可读可写 如果有插入等操作，设为为true，运行程序会报异常 -->
			<tx:method name="add*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="delete*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="update*" read-only="false"
				propagation="REQUIRED" />
			<tx:method name="find*" read-only="true"
				propagation="REQUIRED" />
			<!-- 针对其余的方法 -->
			<tx:method name="*" propagation="NOT_SUPPORTED" />
		</tx:attributes>
	</tx:advice>

	<!-- 3AOP配置 -->
	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut
			expression="execution(* com.ssm.service.*.*(..))" id="pc" />
		<!-- 通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc" />
	</aop:config>

	<!-- Shiro过滤器 -->
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/loginin.html" />
		<property name="unauthorizedUrl" value="/error.html" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<property name="filterChainDefinitions">
			<value>
				/js/**=anon
				/media/**=anon
				/loginin.html=anon
				/register.html=anon
				/forget.html=anon
				/verify.html=anon
				/error.html=anon
				/*.html=authc
			</value>
		</property>
	</bean>

	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.ssm.realm.MyRealm">
		<property name="credentialsMatcher">
			<bean
				class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1"></property>
			</bean>
		</property>
	</bean>

	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile"
			value="classpath:ehcache.xml" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<property name="cacheManager" ref="cacheManager" />
	</bean>

<!-- 	<bean name="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="1024000"></property>
	</bean> -->


</beans>